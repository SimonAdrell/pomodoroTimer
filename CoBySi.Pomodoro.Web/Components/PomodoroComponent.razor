@using CoBySi.Pomodoro
@using CoBySi.Pomodoro.Models
@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Timer
@using CoBySi.Pomodoro.Web.Converter
@using CoBySi.Pomodoro.Web.Handler
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Identity
@using Serilog

@rendermode InteractiveServer

@inject IPomodorHandler _pomodoroHandler
@inject UserManager<PomodoroUser> userManager;
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS

<audio id="timerSound" src="sounds/alert.mp3"></audio>
<div class="mb-3 d-flex mt-5 flex-column align-items-center align-self-center" data-bs-theme="dark">
    <div class="rounded-circle border border-success border-3 d-flex flex-column justify-content-center align-items-center"
        style="width: 300px; height: 300px;">
        <h3>
            @pomodoroState
        </h3>
        <h1 class="display-3">
            @currentMinutesSeconds
        </h1>
        <div class=" flex-row d-flex mt-2">
            <div class=" p-2">
                <button class="btn btn-link" @onclick="StartNext">Start</button>
            </div>
            <div class="p-2 border-start border-success-emphasis border-3">
                <button class="btn btn-link" @onclick="StopPomodoro">Stop</button>
            </div>
        </div>
    </div>
</div>
@code {
    private string? currentMinutesSeconds;
    private string? pomodoroState;

    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }
    private readonly IPomodoroSettingsService _pomodoroSettingsService;
    private int _breakCount;
    private CancellationTokenSource _cts = new();

    public PomodoroComponent(IPomodoroSettingsService pomodoroSettingsService)
    {
        _pomodoroSettingsService = pomodoroSettingsService;
    }

    private async Task<PomodoroSettings> GetSettings()
    {
        string? userid = string.Empty;
        var authstate = await stateAuthenticate;

        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userid = user.Id;
        }
        return await _pomodoroSettingsService.GetUserPomodoroSettingsAsync(userid,
        SessionHandler.GetOrCreateSessionId(HttpContextAccessor.HttpContext),
        _cts.Token);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("requestNotificationPermission");

            if (_pomodoroSettingsService == null)
                throw new ArgumentNullException(nameof(_pomodoroSettingsService));

            var pomodoroSettings = await GetSettings();
            currentMinutesSeconds =
            ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(pomodoroSettings.MinutesPerPomodoro).TotalSeconds);

            SetPomodoroState(PomodoroStatus.Pomodoro);
            StateHasChanged();
        }
    }

    private async Task StopPomodoro()
    {
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler?.Stop();
        StopListeners();
    }

    private async Task StartNext()
    {
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler.StartNext(pomodoroSettings);
        StartListeners();
    }

    private void StartListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.TimerChanged += async (s, e) => await PomodorHandler_TimerChanged(s, e);
    }
    private void StopListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.TimerChanged -= async (s, e) => await PomodorHandler_TimerChanged(s, e);
    }


    private async Task PomodorHandler_TimerChanged(object? sender, TimerChangedEventArgs e)
    {
        Log.Information("TimerChangedEventArgs {@pomocdoroItem}", e);
        if (e.Item is null)
            return;

        if (e.EventType.HasFlag(TimerEventType.Finished))
            await TimerFinished(e.Item);

        currentMinutesSeconds = ConvertTimeSpanToMinutesSeconds(e.NumberOfSecondsLeft);
        SetPomodoroState(e.Item.Status);
        await this.InvokeAsync(() => StateHasChanged());
    }

    private async Task TimerFinished(PomodoroItem pomodoroItem)
    {
        StopListeners();
        await PlayCompletionSound();
        await NotifyTimerCompletion(pomodoroItem);
        Log.Information("PomodoroItem {@pomocdoroItem}", pomodoroItem);
    }

    private async Task NotifyTimerCompletion(PomodoroItem pomodoroItem)
    {
        var title = pomodoroItem.Status.HasFlag(PomodoroStatus.Pomodoro) ? "Pomodoro Complete!" : "Break Complete!";
        var body = pomodoroItem.Status.HasFlag(PomodoroStatus.Pomodoro) ? "Time to take a break!" : "Time to work!";
        Log.Information("Notification {title}", title);

        await JS.InvokeVoidAsync(
        "showNotification",
        title,
        new { body = body, icon = "/images/myface_132.png" }
        );
    }

    private async Task PlayCompletionSound() => await JS.InvokeVoidAsync("playSound", "timerSound");

    private static string ConvertTimeSpanToMinutesSeconds(double? numberOfSeconds)
    {
        if (numberOfSeconds == null)
            return "00:00";
        return TimeSpan.FromSeconds(numberOfSeconds.Value).ConvertTimeSpanToMinutesSecondsString();
    }
    private void SetPomodoroState(PomodoroStatus status)
    {
        pomodoroState = status switch
        {
            PomodoroStatus.ShortBreak => "Short Break",
            PomodoroStatus.LongBreak => "Long Break",
            _ => "Pomodoro",
        };
    }
}
