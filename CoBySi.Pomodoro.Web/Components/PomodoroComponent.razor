@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Timer
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Identity
@using Serilog
@rendermode InteractiveServer
@inject IPomodorHandler _pomodoroHandler
@inject UserManager<PomodoroUser> userManager;

<div class="mb-3 d-flex mt-5 flex-column align-items-center align-self-center" data-bs-theme="dark">
    <div class="rounded-circle border border-success border-3 d-flex flex-column justify-content-center align-items-center"
        style="width: 300px; height: 300px;">
        <h1 class="display-3">
            @currentMinutesSeconds
        </h1>
        <div class=" flex-row d-flex mt-2">
            <div class=" p-2">
                <button class="btn btn-link" @onclick="StartPomdoro">Start</button>
            </div>
            <div class="p-2 border-start border-success-emphasis border-3">
                <button class="btn btn-link" @onclick="StopPomodoro">Stop</button>
            </div>
        </div>
    </div>
</div>
@code {
    private string? currentMinutesSeconds;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }

    private PomodoroState _pomodoroState = PomodoroState.Pomodoro;
    private readonly IPomodoroSettingsService _pomodoroSettingsService;
    private int _breakCount;

    public PomodoroComponent(IPomodoroSettingsService pomodoroSettingsService)
    {
        _pomodoroSettingsService = pomodoroSettingsService;
    }

    private async Task<PomodoroSettings> GetSettings()
    {
        string? userid = string.Empty;
        var authstate = await stateAuthenticate;

        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userid = user.Id;
        }
        return await _pomodoroSettingsService.GetUserPomodoroSettingsAsync(userid);
    }
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (_pomodoroSettingsService == null)
                throw new ArgumentNullException(nameof(_pomodoroSettingsService));

            var pomodoroSettings = await GetSettings();
            ChangePomodoroState(PomodoroState.Pomodoro, pomodoroSettings);
            StateHasChanged();
        }
    }
    private async Task StartPomdoro()
    {
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler?.Start(_pomodoroState, GetTotalNumberOfSeconds(_pomodoroState, pomodoroSettings));
        StartListeners();
    }

    private async Task StopPomodoro()
    {
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler?.Stop(GetTotalNumberOfSeconds(_pomodoroState, pomodoroSettings));
        StopListeners();
    }

    private void StartListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.ElapsedTimeChanged += PomodorHandler_ElapsedTimeChanged;
        _pomodoroHandler.TimerFinished += async (s, e) => await PomodorHandler_TimerFinished(s, e);
    }
    private void StopListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.ElapsedTimeChanged -= PomodorHandler_ElapsedTimeChanged;
        _pomodoroHandler.TimerFinished -= async (s, e) => await PomodorHandler_TimerFinished(s, e);
    }
    private void PomodorHandler_ElapsedTimeChanged(object? sender, TimeChangedEventArgs e)
    {
        currentMinutesSeconds = ConvertTimeSpanToMinutesSeconds(e.NumberOfSecondsLeft);
        this.InvokeAsync(() => StateHasChanged());
    }

    private async Task PomodorHandler_TimerFinished(object? sender, TimerFinishedEventArgs e)
    {
        var pomodoroSettings = await GetSettings();

        StopListeners();
        switch (e.StateFinished)
        {
            case PomodoroState.Pomodoro:
                await PomodoroFinished();
                break;
            case PomodoroState.ShortBreak:
                _breakCount++;
                ChangePomodoroState(PomodoroState.Pomodoro, pomodoroSettings);
                break;
            case PomodoroState.LongBreak:
                ChangePomodoroState(PomodoroState.Pomodoro, pomodoroSettings);
                break;
        }
        await this.InvokeAsync(() => StateHasChanged());
    }

    private async Task PomodoroFinished()
    {

        var user = await userManager.GetUserAsync(HttpContext.User);
        var pomodoroSettings = await GetSettings();
        if (_breakCount >= pomodoroSettings?.PomodorosBeforeLongBreak)
        {
            ChangePomodoroState(PomodoroState.LongBreak, pomodoroSettings);
            _breakCount = 0;
        }
        ChangePomodoroState(PomodoroState.ShortBreak, pomodoroSettings);
    }
    private static string ConvertTimeSpanToMinutesSeconds(double? numberOfSeconds)
    {
        if (numberOfSeconds == null)
            return "00:00";

        var timeSpan = TimeSpan.FromSeconds(numberOfSeconds.Value);
        return $"{timeSpan.TotalMinutes:00}:{timeSpan.Seconds:00}";
    }

    private void ChangePomodoroState(PomodoroState newState, PomodoroSettings? settings)
    {
        if (settings == null)
            throw new ArgumentNullException(nameof(settings));

        _pomodoroState = newState;
        currentMinutesSeconds = ConvertTimeSpanToMinutesSeconds(GetTotalNumberOfSeconds(newState, settings)) ?? "00:00";
    }

    public static double? GetTotalNumberOfSeconds(PomodoroState pomodoroState, PomodoroSettings pomodoroSettings)
    {
        return pomodoroState switch
        {
            PomodoroState.ShortBreak => TimeSpan.FromMinutes(pomodoroSettings.MinutesPerShortBreak).TotalSeconds,
            PomodoroState.LongBreak => TimeSpan.FromMinutes(pomodoroSettings.MinutesPerLongBreak).TotalSeconds,
            _ => (double?)TimeSpan.FromMinutes(pomodoroSettings.MinutesPerPomodoro).TotalSeconds,
        };
    }
}
