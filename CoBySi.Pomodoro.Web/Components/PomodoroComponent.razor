@using CoBySi.Pomodoro
@using CoBySi.Pomodoro.Models
@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Repository.Repositories
@using CoBySi.Pomodoro.Timer
@using CoBySi.Pomodoro.Web.Converter
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity
@using Serilog

@rendermode InteractiveServer

@inject IPomodorHandler _pomodoroHandler
@inject UserManager<PomodoroUser> userManager;
@inject ILocalStorageService _localStorage;


<audio id="timerSound" src="sounds/alert.mp3"></audio>
<div class="mb-3 d-flex mt-5 flex-column align-items-center align-self-center" data-bs-theme="dark">
    <div class="rounded-circle border-success border-3 d-flex flex-column justify-content-center align-items-center"
        style="width: 300px; height: 300px;">
        <h3>
            @pomodoroState
        </h3>
        <h1 class="display-3">
            @currentMinutesSeconds
        </h1>
        <div class=" flex-row d-flex mt-2">
            @if (!isActive)
            {
                <div class=" p-2">
                    <button class="btn btn-link" id="startBtn" @onclick="StartNext">
                        <Icon Name="IconName.Play" Size="IconSize.x1" />
                    </button>
                </div>
            }
            else
            {
                <div class="p-2">
                    <button class="btn btn-link" @onclick="StopPomodoro">
                        <Icon Name="IconName.Stop" Size="IconSize.x1" />
                    </button>
                </div>
            }
        </div>
    </div>
</div>
@code {
    private string? currentMinutesSeconds;
    private string? pomodoroState;
    private bool isActive = false;

    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }
    private readonly IPomodoroSettingsService _pomodoroSettingsService;
    private CancellationTokenSource _cts = new();
    private readonly IUserSettingsRepository _userSettingsRepository;
    private readonly INotificationService _notificationService;
    public PomodoroComponent(IPomodoroSettingsService pomodoroSettingsService, IUserSettingsRepository
    userSettingsRepository, INotificationService notificationService)
    {
        _pomodoroSettingsService = pomodoroSettingsService;
        _userSettingsRepository = userSettingsRepository;
        _notificationService = notificationService;
    }

    private async Task<PomodoroSettings> GetSettings()
    {
        string? userid = string.Empty;
        var authstate = await stateAuthenticate;

        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userid = user.Id;
        }

        return await _pomodoroSettingsService.GetUserPomodoroSettingsAsync(userid,
        await _localStorage.GetOrCreateSessionIdAsync(), _cts.Token);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _notificationService.InvokeNotificationPermissionAsync();

            if (_pomodoroSettingsService == null)
                throw new ArgumentNullException(nameof(_pomodoroSettingsService));

            var pomodoroSettings = await GetSettings();
            currentMinutesSeconds =
            ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(pomodoroSettings.MinutesPerPomodoro).TotalSeconds);

            SetPomodoroState(PomodoroStatus.Pomodoro);
            StateHasChanged();
        }
    }

    private async Task StopPomodoro()
    {
        isActive = false;
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler?.Stop();
        StopListeners();
    }

    private async Task StartNext()
    {
        isActive = true;
        var pomodoroSettings = await GetSettings();
        _pomodoroHandler.StartNext(pomodoroSettings);
        StartListeners();
    }

    private void StartListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.TimerChanged += async (s, e) => await PomodorHandler_TimerChanged(s, e);
    }
    private void StopListeners()
    {
        if (_pomodoroHandler == null)
            throw new ArgumentNullException(nameof(_pomodoroHandler));

        _pomodoroHandler.TimerChanged -= async (s, e) => await PomodorHandler_TimerChanged(s, e);
    }


    private async Task PomodorHandler_TimerChanged(object? sender, TimerChangedEventArgs e)
    {
        Log.Information("TimerChangedEventArgs {@pomocdoroItem}", e);
        if (e.Item is null)
            return;

        if (e.EventType.HasFlag(TimerEventType.Finished))
            await TimerFinished(e.Item);

        currentMinutesSeconds = ConvertTimeSpanToMinutesSeconds(e.NumberOfSecondsLeft);
        SetPomodoroState(e.Item.Status);
        await this.InvokeAsync(() => StateHasChanged());
    }

    private async Task TimerFinished(PomodoroItem pomodoroItem)
    {
        StopListeners();
        string userId = string.Empty;
        var authstate = await stateAuthenticate;
        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userId = user.Id;
        }
        if (string.IsNullOrEmpty(userId))
        {
            await PlayCompletionSound();
            await NotifyTimerCompletion(pomodoroItem);
            return;
        }

        var NotificationSettings = await _userSettingsRepository.GetUserNotificationSettingsAsync(userId, _cts.Token);
        if (NotificationSettings is null)
        {
            await PlayCompletionSound();
            await NotifyTimerCompletion(pomodoroItem);
            return;
        }
        if (NotificationSettings.NotificationSoundEnabled)
            await PlayCompletionSound();

        if (NotificationSettings.NotificationEnabled)
            await NotifyTimerCompletion(pomodoroItem);

        Log.Information("PomodoroItem {@pomocdoroItem}", pomodoroItem);
    }

    public async Task NotifyTimerCompletion(PomodoroItem pomodoroItem)
    {
        var title = pomodoroItem.Status.Equals(PomodoroStatus.Pomodoro) ? "Pomodoro Complete!" : "Break Complete!";
        var body = pomodoroItem.Status.Equals(PomodoroStatus.Pomodoro) ? "Time to take a break!" : "Time to work!";
        Log.Information("Notification {title}", title);

        await _notificationService.InvokeNotificaionShow(title, body, "/images/myface_132.png");
    }

    private async Task PlayCompletionSound() => await _notificationService.PlayCompletionSoundAsync();

    private static string ConvertTimeSpanToMinutesSeconds(double? numberOfSeconds)
    {
        if (numberOfSeconds == null)
            return "00:00";
        return TimeSpan.FromSeconds(numberOfSeconds.Value).ConvertTimeSpanToMinutesSecondsString();
    }
    private void SetPomodoroState(PomodoroStatus status)
    {
        pomodoroState = status switch
        {
            PomodoroStatus.ShortBreak => "Short Break",
            PomodoroStatus.LongBreak => "Long Break",
            _ => "Pomodoro",
        };
    }
}
