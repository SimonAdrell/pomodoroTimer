@using CoBySi.Pomodoro.Timer
@using CoBySi.Pomodoro.Web.PomodoroProperties
@using Serilog
@rendermode InteractiveServer
<div class="mb-3 d-flex mt-5 flex-column align-items-center align-self-center" data-bs-theme="dark">
    <div class="rounded-circle border border-success border-3 d-flex flex-column justify-content-center align-items-center"
        style="width: 300px; height: 300px;">
        <h1 class="display-3">
            @currentMinutesSeconds
        </h1>
        @* <h4>@_pomodoroState</h4> *@
        <div class=" flex-row d-flex mt-2">
            <div class=" p-2">
                <button class="btn btn-link" @onclick="StartPomdoro">Start</button>
            </div>
            <div class="p-2 border-start border-success-emphasis border-3">
                <button class="btn btn-link" @onclick="StopPomodoro">Stop</button>
            </div>
        </div>
    </div>
    @* <h4>@_breakCount pomodoros</h4> *@

</div>
@code {
    private string? currentMinutesSeconds;
    private PomodoroState _pomodoroState = PomodoroState.Pomodoro;
    private IPomodorHandler? _pomodorHandler;
    private readonly IPomdoroPropertiesHandler? _pomdoroPropertiesHandler;
    private PomodoroSettings? _pomodoroSettings;
    private int _breakCount;
    public Pomodoro(IPomdoroPropertiesHandler pomdoroPropertiesHandler)
    {
        _pomdoroPropertiesHandler = pomdoroPropertiesHandler;
    }

    protected override async Task OnInitializedAsync()
    {
        if (_pomdoroPropertiesHandler == null)
            throw new ArgumentNullException(nameof(_pomdoroPropertiesHandler));

        _pomodoroSettings = await _pomdoroPropertiesHandler.GetPomodoroPropertiesAsync(Guid.Empty);
        currentMinutesSeconds =
        ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(_pomodoroSettings.MinutesPerPomodoro).TotalSeconds);
        _pomodorHandler = new PomodorHandler(_pomodoroSettings, TimeProvider.System);
    }
    private void StartPomdoro()
    {
        _pomodorHandler?.Start(_pomodoroState);
        StartListeners();
    }

    private void StopPomodoro()
    {
        _pomodorHandler?.Stop();
        StopListeners();
    }

    private void StartListeners()
    {
        if (_pomodorHandler == null)
            throw new ArgumentNullException(nameof(_pomodorHandler));

        _pomodorHandler.ElapsedTimeChanged += PomodorHandler_ElapsedTimeChanged;
        _pomodorHandler.TimerFinished += PomodorHandler_TimerFinished;
    }
    private void StopListeners()
    {
        if (_pomodorHandler == null)
            throw new ArgumentNullException(nameof(_pomodorHandler));

        _pomodorHandler.ElapsedTimeChanged -= PomodorHandler_ElapsedTimeChanged;
        _pomodorHandler.TimerFinished -= PomodorHandler_TimerFinished;
    }
    private void PomodorHandler_ElapsedTimeChanged(object? sender, TimeChangedEventArgs e)
    {
        currentMinutesSeconds = ConvertTimeSpanToMinutesSeconds(e.NumberOfSecondsLeft);
        this.InvokeAsync(() => StateHasChanged());
    }

    private void PomodorHandler_TimerFinished(object? sender, TimerFinishedEventArgs e)
    {
        StopListeners();
        switch (e.StateFinished)
        {
            case PomodoroState.Pomodoro:
                PomodoroFinished();
                break;
            case PomodoroState.ShortBreak:
                _breakCount++;
                ChangePomodoroState(PomodoroState.Pomodoro, _pomodoroSettings);
                break;
            case PomodoroState.LongBreak:
                ChangePomodoroState(PomodoroState.Pomodoro, _pomodoroSettings);
                break;
        }
        this.InvokeAsync(() => StateHasChanged());
    }

    private void PomodoroFinished()
    {
        if (_breakCount >= _pomodoroSettings?.PomodorosBeforeLongBreak)
        {
            ChangePomodoroState(PomodoroState.LongBreak, _pomodoroSettings);
            _breakCount = 0;
        }
        ChangePomodoroState(PomodoroState.ShortBreak, _pomodoroSettings);
    }
    private static string ConvertTimeSpanToMinutesSeconds(double? numberOfSeconds)
    {
        if (numberOfSeconds == null)
            return "00:00";

        var timeSpan = TimeSpan.FromSeconds(numberOfSeconds.Value);
        return $"{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
    }

    private void ChangePomodoroState(PomodoroState newState, PomodoroSettings? settings)
    {
        if (settings == null)
            throw new ArgumentNullException(nameof(settings));

        _pomodoroState = newState;
        currentMinutesSeconds = GetTotalNumberOfSeconds(newState, settings) ?? "00:00";
    }

    private static string? GetTotalNumberOfSeconds(PomodoroState state, PomodoroSettings settings)
    {
        string? currentMinutesSeconds = null;
        switch (state)
        {
            case PomodoroState.Pomodoro:
                currentMinutesSeconds =
                ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(settings.MinutesPerPomodoro).TotalSeconds);
                break;
            case PomodoroState.ShortBreak:
                currentMinutesSeconds =
                ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(settings.MinutesPerShortBreak).TotalSeconds);
                break;
            case PomodoroState.LongBreak:
                currentMinutesSeconds =
                ConvertTimeSpanToMinutesSeconds(TimeSpan.FromMinutes(settings.MinutesPerLongBreak).TotalSeconds);
                break;
        }
        return currentMinutesSeconds;
    }
}
