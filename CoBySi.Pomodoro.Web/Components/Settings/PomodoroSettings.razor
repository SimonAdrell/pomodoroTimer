@using System.ComponentModel.DataAnnotations
@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Web.Components.Account
@using CoBySi.Pomodoro.Web.Components.Account.Shared
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Identity

@inject UserManager<PomodoroUser> userManager;
@inject ISettingsService SettingsService;
@inject ILocalStorageService _localStorage;

<PageTitle>Manage pomodoro settings</PageTitle>

@* <StatusMessage Message="@message" /> *@
<h3 class="mt-3 mb-3">Pomodoro settings</h3>
<EditForm FormName="edit-pomodorosettings" EditContext="editContext" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.PomodoroDuration" class="form-control" aria-required="true"
            placeholder="Duration of pomodoro." />
        <label for="nPomodoroDuration" class="form-label">Duration of pomodoro</label>
        <ValidationMessage For="() => Input.PomodoroDuration" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.ShortBreakDuration" class="form-control" aria-required="true"
            placeholder="Duration of short break." />
        <label for="nPomodoroDuration" class="form-label">Duration of short break</label>
        <ValidationMessage For="() => Input.ShortBreakDuration" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.LongBreakDuration" class="form-control" aria-required="true"
            placeholder="Duration of long break." />
        <label for="nPomodoroDuration" class="form-label">Duration of long break</label>
        <ValidationMessage For="() => Input.LongBreakDuration" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.LongBreakInterval" class="form-control" aria-required="true"
            placeholder="Number of pomodoros before long break." />
        <label for="nPomodoroDuration" class="form-label">Number of pomodoros before long break</label>
        <ValidationMessage For="() => Input.LongBreakInterval" class="text-danger" />
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Update settings</button>
</EditForm>
@code {
    private const string SessionCookieName = "PomodoroSessionId";
    private string? sessionId;
    private EditContext? editContext;
    private string? message;

    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        editContext ??= new(Input);
        await this.InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        sessionId = await _localStorage.GetOrCreateSessionIdAsync();
        Input = await GetInputModel();
        StateHasChanged();
    }

    private async Task OnValidSubmitAsync()
    {
        if (editContext is null)
            return;

        if (editContext.Model is InputModel im)
        {
            var userId = string.Empty;
            var authstate = await stateAuthenticate;
            if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
            {
                var user = await userManager.GetUserAsync(authstate.User);
                if (user != null)
                    userId = user.Id;
            }

            await SettingsService.SavePomodoroSettingsAsync(userId, new
            Pomodoro.PomodoroSettings()
            {
                MinutesPerLongBreak = Input.LongBreakDuration,
                MinutesPerPomodoro = Input.PomodoroDuration,
                MinutesPerShortBreak = Input.ShortBreakDuration,
                PomodorosBeforeLongBreak = Input.LongBreakInterval
            }, _cts.Token);
            message = "Settings updated";
        }
    }

    private async Task<InputModel> GetInputModel()
    {
        string userId = string.Empty;
        var authstate = await stateAuthenticate;
        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userId = user.Id;
        }

        var settings = await SettingsService.GetUserPomodoroSettingsAsync(userId, _cts.Token);
        return new InputModel
        {
            PomodoroDuration = settings.MinutesPerPomodoro,
            ShortBreakDuration = settings.MinutesPerShortBreak,
            LongBreakDuration = settings.MinutesPerLongBreak,
            LongBreakInterval = settings.PomodorosBeforeLongBreak
        };
    }

    private sealed class InputModel
    {
        [Display(Name = "Duration of pomodoro")]
        public double PomodoroDuration { get; set; }

        [Display(Name = "Duration of short break")]
        public double ShortBreakDuration { get; set; }

        [Display(Name = "Duration of long break")]
        public double LongBreakDuration { get; set; }

        [Display(Name = "Number of pomodoros before long break")]
        public double LongBreakInterval { get; set; }
    }
}
