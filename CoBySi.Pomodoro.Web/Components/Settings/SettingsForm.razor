@using CoBySi.Pomodoro.Repository
@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Repository.Repositories
@using CoBySi.Pomodoro.Web.Components.Account
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using Serilog
@inject IJSRuntime JS
@inject IdentityUserAccessor UserAccessor
@inject ISettingsService settingsService
@inject UserManager<PomodoroUser> userManager;
@inject IOptions<PomodoroSettings> pomodoroSettings;


<EditForm FormName="edit-pomodorosettings" EditContext="editContext" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.PomodoroDuration" class="form-control" aria-required="true"
            placeholder="Duration of pomodoro." />
        <label for="nPomodoroDuration" class="form-label">Duration of pomodoro</label>
    </div>

    <ValidationMessage For="() => Input.PomodoroDuration" class="text-danger" />
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.ShortBreakDuration" class="form-control" aria-required="true"
            placeholder="Duration of short break." />
        <label for="nPomodoroDuration" class="form-label">Duration of short break</label>
        <ValidationMessage For="() => Input.ShortBreakDuration" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.LongBreakDuration" class="form-control" aria-required="true"
            placeholder="Duration of long break." />
        <label for="nPomodoroDuration" class="form-label">Duration of long break</label>
        <ValidationMessage For="() => Input.LongBreakDuration" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputNumber TValue="double" @bind-Value="Input.LongBreakInterval" class="form-control" aria-required="true"
            placeholder="Number of pomodoros before long break." />
        <label for="nPomodoroDuration" class="form-label">Number of pomodoros before long break</label>
        <ValidationMessage For="() => Input.LongBreakInterval" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <Switch @bind-Value="Input.NotificationsEnabled" aria-required="true" Label="Notify when timer is completed" />
        <ValidationMessage For="() => Input.NotificationsEnabled" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <Switch @bind-Value="Input.PlaySound" aria-required="true" Label="Play sound when timer is complete" />
        <ValidationMessage For="() => Input.PlaySound" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <Button Color="ButtonColor.Secondary" @onclick="TestNotification">
            Test Notification
        </Button>
    </div>
    <div class="md-3">
        <h5>@message</h5>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

@code {
    private EditContext? editContext;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private CancellationTokenSource _cts = new();
    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }
    private string message = string.Empty;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        editContext ??= new(Input);
        await this.InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Input = await GetInputModel();
        StateHasChanged();
    }
    private async Task TestNotification()
    {
        await JS.InvokeVoidAsync("requestNotificationPermission");
        await JS.InvokeVoidAsync(
        "showNotification",
        "Notification test",
        new { body = "Testing notification", icon = "/images/myface_132.png" }
        );
    }
    private async Task OnValidSubmitAsync()
    {
        if (editContext is null)
            return;

        if (editContext.Model is InputModel im)
        {
            string userId = string.Empty;
            var authstate = await stateAuthenticate;
            if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
            {
                var user = await userManager.GetUserAsync(authstate.User);
                if (user != null)
                    userId = user.Id;
            }

            await settingsService.SaveSettings(userId, new Repository.Models.UserSettings(userId)
            {
                NotificationEntity = new Repository.Models.NotificationEntity()
                {
                    Created = DateTime.UtcNow,
                    LastChanged = DateTime.UtcNow,
                    NotificationEnabled = Input.NotificationsEnabled,
                    NotificationSoundEnabled = Input.NotificationsEnabled,
                    SoundID = Input.SoundID
                },
                PommodoroSettings = new Repository.Models.PomodoroSettingsEntity()
                {
                    MinutesPerPomodoro = Input.PomodoroDuration,
                    MinutesPerShortBreak = Input.ShortBreakDuration,
                    MinutesPerLongBreak = Input.LongBreakDuration,
                    PomodorosBeforeLongBreak = Input.LongBreakInterval
                }
            }, _cts.Token);
        }

        message = "Notification settings saved";

    }

    private async Task<InputModel> GetInputModel()
    {
        string userId = string.Empty;
        var authstate = await stateAuthenticate;
        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userId = user.Id;
        }
        var settings = await settingsService.GetUserSettingsAsync(userId, _cts.Token);
        if (settings is null)
        {
            var defaultInputModel = new InputModel();
            var defaultPomodoroSettings = pomodoroSettings.Value;
            defaultInputModel.PomodoroDuration = defaultPomodoroSettings.MinutesPerPomodoro;
            defaultInputModel.ShortBreakDuration = defaultPomodoroSettings.MinutesPerShortBreak;
            defaultInputModel.LongBreakDuration = defaultPomodoroSettings.MinutesPerLongBreak;
            defaultInputModel.LongBreakInterval = defaultPomodoroSettings.PomodorosBeforeLongBreak;
            return defaultInputModel;
        }

        var inputModel = new InputModel();

        if (settings.NotificationEntity is not null)
        {
            inputModel.NotificationsEnabled = settings.NotificationEntity.NotificationEnabled;
            inputModel.PlaySound = settings.NotificationEntity.NotificationSoundEnabled;
            inputModel.SoundID = settings.NotificationEntity.SoundID;
        }
        if (settings.PommodoroSettings is null)
        {
            var defaultPomodoroSettings = pomodoroSettings.Value;
            settings.PommodoroSettings = new Repository.Models.PomodoroSettingsEntity()
            {
                MinutesPerPomodoro = defaultPomodoroSettings.MinutesPerPomodoro,
                MinutesPerShortBreak = defaultPomodoroSettings.MinutesPerShortBreak,
                MinutesPerLongBreak = defaultPomodoroSettings.MinutesPerLongBreak,
                PomodorosBeforeLongBreak = defaultPomodoroSettings.PomodorosBeforeLongBreak,
            };
        }
        if (settings.PommodoroSettings is not null)
        {
            inputModel.PomodoroDuration = settings.PommodoroSettings.MinutesPerPomodoro;
            inputModel.ShortBreakDuration = settings.PommodoroSettings.MinutesPerShortBreak;
            inputModel.LongBreakDuration = settings.PommodoroSettings.MinutesPerLongBreak;
            inputModel.LongBreakInterval = settings.PommodoroSettings.PomodorosBeforeLongBreak;
        }

        return inputModel;
    }
    private sealed class InputModel
    {
        public double PomodoroDuration { get; set; }
        public double ShortBreakDuration { get; set; }
        public double LongBreakDuration { get; set; }
        public double LongBreakInterval { get; set; }
        public bool NotificationsEnabled { get; set; } = true;
        public bool PlaySound { get; set; } = true;
        public int SoundID { get; set; }
    }
}