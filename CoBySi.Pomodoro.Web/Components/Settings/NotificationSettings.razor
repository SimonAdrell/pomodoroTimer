@using CoBySi.Pomodoro.Repository
@using Serilog
@inject IJSRuntime JS

<h3 class="mt-3 mb-3">Notification settings</h3>
<EditForm FormName="edit-pomodorosettings" EditContext="editContext" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="mb-3">
        <Switch @bind-Value="Input.NotificaionsEnabled" aria-required="true" Label="Notify when timer is completed" />
        <ValidationMessage For="() => Input.NotificaionsEnabled" class="text-danger" />
    </div>
    <div class="mb-3">
        <Button Color="ButtonColor.Secondary" @onclick="TestNotification">
            Test Notification
        </Button>
    </div>

    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

@code {
    private EditContext? editContext;
    private InputModel Input { get; set; } = new();
    private readonly IUserSettingsRepository _userSettingsRepository;

    public NotificationSettings(IUserSettingsRepository userSettingsRepository)
    {
        _userSettingsRepository = userSettingsRepository;
    }

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        editContext ??= new(Input);
        await this.InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        @* Input = await GetInputModel(); *@
        StateHasChanged();
    }
    private async Task TestNotification()
    {
        await JS.InvokeVoidAsync("requestNotificationPermission");
        await JS.InvokeVoidAsync(
        "showNotification",
        "Notification test",
        new { body = "Testing notification", icon = "/images/myface_132.png" }
        );
    }
    private async Task OnValidSubmitAsync()
    {
        if (editContext is null)
            return;

        if (editContext.Model is InputModel im)
        {
            Log.Information("Input model: {@im}", im);
        }
    }
    private sealed class InputModel
    {
        public bool NotificaionsEnabled { get; set; } = true;
    }
}