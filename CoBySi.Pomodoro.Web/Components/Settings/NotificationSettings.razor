@using CoBySi.Pomodoro.Repository
@using CoBySi.Pomodoro.Repository.Identity.Data
@using CoBySi.Pomodoro.Repository.Repositories
@using CoBySi.Pomodoro.Web.Components.Account
@using CoBySi.Pomodoro.Web.Services
@using Microsoft.AspNetCore.Identity
@using Serilog
@inject IJSRuntime JS
@inject IdentityUserAccessor UserAccessor
@inject SettingsService settingsService
@inject UserManager<PomodoroUser> userManager;

<h3 class="mt-3 mb-3">Notification settings</h3>
<EditForm FormName="edit-pomodorosettings" EditContext="editContext" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" role="alert" />
    <div class="mb-3">
        <Switch @bind-Value="Input.NotificationsEnabled" aria-required="true" Label="Notify when timer is completed" />
        <ValidationMessage For="() => Input.NotificationsEnabled" class="text-danger" />
    </div>
    <div class="mb-3">
        <Switch @bind-Value="Input.PlaySound" aria-required="true" Label="Play sound when timer is complete" />
        <ValidationMessage For="() => Input.PlaySound" class="text-danger" />
    </div>
    <div class="mb-3">
        <Button Color="ButtonColor.Secondary" @onclick="TestNotification">
            Test Notification
        </Button>
    </div>
    <div class="md-3">
        <h5>@message</h5>
    </div>
    <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
</EditForm>

@code {
    private EditContext? editContext;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private CancellationTokenSource _cts = new();
    [CascadingParameter]
    private Task<AuthenticationState> stateAuthenticate { get; set; }
    private string message = string.Empty;
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        editContext ??= new(Input);
        await this.InvokeAsync(() => StateHasChanged());
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        Input = await GetInputModel();
        StateHasChanged();
    }
    private async Task TestNotification()
    {
        await JS.InvokeVoidAsync("requestNotificationPermission");
        await JS.InvokeVoidAsync(
        "showNotification",
        "Notification test",
        new { body = "Testing notification", icon = "/images/myface_132.png" }
        );
    }
    private async Task OnValidSubmitAsync()
    {
        if (editContext is null)
            return;

        if (editContext.Model is InputModel im)
        {
            string userId = string.Empty;
            var authstate = await stateAuthenticate;
            if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
            {
                @* var user = await userManager.GetUserAsync(authstate.User); *@
                var user = await UserAccessor.GetRequiredUserAsync(HttpContext);

                userId = await userManager.GetUserIdAsync(user);
                if (user != null)
                    userId = user.Id;
            }
            await settingsService.SaveNotificationSettingsAsync(userId, new Repository.Models.NotificationEntity()
            {
                UserId = userId,
                NotificationEnabled = Input.NotificationsEnabled,
                NotificationSoundEnabled = Input.PlaySound,
                Created = DateTime.UtcNow,
                LastChanged = DateTime.UtcNow,
                SoundID = Input.SoundID
            }, _cts.Token);
            message = "Notification settings saved";
        }
    }

    private async Task<InputModel> GetInputModel()
    {
        string userId = string.Empty;
        var authstate = await stateAuthenticate;
        if (authstate != null && authstate.User?.Identity != null && authstate.User.Identity.IsAuthenticated)
        {
            var user = await userManager.GetUserAsync(authstate.User);
            if (user != null)
                userId = user.Id;
        }
        var settings = await settingsService.GetNotificationSettingsAsync(userId, _cts.Token);
        if (settings is null)
            return new InputModel();

        return new InputModel()
        {
            NotificationsEnabled = settings.NotificationEnabled,
            PlaySound = settings.NotificationSoundEnabled,
            SoundID = settings.SoundID
        };
    }
    private sealed class InputModel
    {
        public bool NotificationsEnabled { get; set; } = true;
        public bool PlaySound { get; set; } = true;
        public int SoundID { get; set; }

    }
}